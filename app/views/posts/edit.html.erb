<h1><%= t('title') %></h1>
<% if @post.errors.any? %>
  <div>
    <h2>情報の更新に失敗しました</h2>
    <hr>
    <ul>
      <% @post.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
    </ul>
  </div>
<% end %>
<%= render 'form', {post: @post, action: 'update-post'} %>
<div type="text/javascript">
<script>
let map; 
let infoWindow;
let marker;
let geocoder;
let aft;

function initMap() { 
  // 現在地への移動
  function moveCurrentLocation() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };

          // 現在地を地図の中心に移動
          map.setCenter(pos);

          // 現在地の経度と緯度を入力
          inputLocation(pos);
        },
        () => {
          handleLocationError(true, infoWindow, map.getCenter());
        }
      );
    } else {
      // Browser doesn't support Geolocation
      handleLocationError(false, infoWindow, map.getCenter());
    }
  };

  function inputLocation(position) {
    document.getElementById('lat').value = position.lat;
    document.getElementById('lng').value = position.lng;
    geocoder.geocode({location: position}, (results) => {
      document.getElementById('place').value = results[0].formatted_address
    })
  }
  // データベースから取得した位置情報をLatLngコンストラクタでインスタンス化
  let latLng = new google.maps.LatLng(
    parseFloat(document.getElementById('lat').value), 
    parseFloat(document.getElementById('lng').value)
  )

  // 現在地ボタン
  const locationButton = document.getElementById("current_location");
  locationButton.addEventListener("click", moveCurrentLocation);

  geocoder = new google.maps.Geocoder();

  map = new google.maps.Map(document.getElementById("map"), {
    center:  {lat: latLng.lat(), lng: latLng.lng()},  // 登録されている地点
    zoom: 15,
  });

  placeMarkerAndPanTo(latLng, map);
  
  map.addListener("click", (e) => {
    placeMarkerAndPanTo(e.latLng, map);
  });
}

// 現在地取得時にエラーが発生した場合の処理
function handleLocationError(browserHasGeolocation, infoWindow, pos) {
  infoWindow.setPosition(pos);
  infoWindow.setContent(
    browserHasGeolocation
      ? "Error: The Geolocation service failed."
      : "Error: Your browser doesn't support geolocation."
  );
  infoWindow.open(map);
}

// マーカーの設置
function placeMarkerAndPanTo(latLng, map) {
  map.panTo(latLng);
  if (aft == true){
    marker.setMap(null);
  }
  //新しくマーカーを作成する
  marker = new google.maps.Marker({
    map: map,
    position: latLng,
    draggable: true	// ドラッグ可能にする
  });

  //二度目以降か判断
  aft = true

  //検索した時に緯度経度を入力する
  inputLatLng(latLng);

  // マーカーのドロップ（ドラッグ終了）時のイベント
  google.maps.event.addListener( marker, 'dragend', e => {
    // イベントの引数evの、プロパティ.latLngが緯度経度
    inputLatLng(e.latLng)
  });
}
// 検索後のマップ作成
function codeAddress(){
  let inputAddress = document.getElementById('address').value;
  geocoder.geocode( { 'address': inputAddress }, function(results, status) {
    if (status == 'OK') {
      // マーカーが複数できないようにする
      if (aft === true){
        marker.setMap(null);
      }
      //新しくマーカーを作成する
      map.setCenter(results[0].geometry.location);
      marker = new google.maps.Marker({
        map: map,
        position: results[0].geometry.location,
        draggable: true	// ドラッグ可能にする
      });

      //二度目以降か判断
      aft = true

      //検索した時に緯度経度を入力する
      inputLatLng(results[0].geometry.location);

      // マーカーのドロップ（ドラッグ終了）時のイベント
      google.maps.event.addListener( marker, 'dragend', e => {
        // イベントの引数evの、プロパティ.latLngが緯度経度
        inputLatLng(e.latLng)
      });
    } else {
      alert('該当する結果がありませんでした：' + status);
    }
  });
}
// 取得した位置情報を入力
function inputLatLng(latLng) {
  document.getElementById('lat').value = latLng.lat();
  document.getElementById('lng').value = latLng.lng();
  geocoder.geocode({location: latLng}, (results) => {
    document.getElementById('place').value = results[0].place_id
  })
}
window.initMap = initMap;
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAPS_API_KEY'] %>&callback=initMap" async defer></script>
</div>